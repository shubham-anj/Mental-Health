<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Client Session Notes</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    
    <style>
        /* --- THEME COLORS FOR CONSISTENCY --- */
        :root {
            --color-bg-main: #2c3e50;         /* Main Body Background */
            --color-bg-card: #34495e;         /* Card Background */
            --color-accent-teal: #55a8a7;
            --color-accent-pink: #e83e6f;
            --color-text-light: #ecf0f1;
            --color-text-muted: #95a5a6;
        }

        /* General Theme Styling - Dark Mode */
        body {
            background-color: var(--color-bg-main); 
            color: var(--color-text-light);
            min-height: 100vh;
            font-family: sans-serif;
            padding: 20px;
        }

        /* Header and Title */
        .header-section {
            padding: 15px 0;
            margin-bottom: 25px;
            border-bottom: 1px solid #3e5267;
        }
        
        .data-card {
            background-color: var(--color-bg-card);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 25px;
            height: 100%;
        }

        /* Form Controls */
        .form-control-dark, .form-select-dark {
            background-color: #3e5267;
            border: 1px solid #4a647d;
            color: var(--color-text-light);
            resize: vertical; /* Allow resizing for notes */
        }
        .form-control-dark::placeholder {
            color: var(--color-text-muted);
        }
        
        /* Save Button */
        .btn-teal {
            background-color: var(--color-accent-teal);
            color: white;
            font-weight: 600;
        }
        
        /* Note History Styling */
        .note-card {
            background-color: #3e5267; 
            border-left: 5px solid var(--color-accent-teal);
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 15px;
            white-space: pre-wrap; /* Keeps formatting and line breaks */
            position: relative; /* For delete button positioning */
        }
        .note-date {
            font-size: 0.8rem;
            color: var(--color-text-muted);
            margin-bottom: 5px;
            display: block;
        }

        /* Delete Button Styling */
        .btn-delete-note {
            position: absolute;
            top: 5px;
            right: 5px;
            background: none;
            border: none;
            color: var(--color-accent-pink); /* Pink/Red for caution */
            font-size: 1.1em;
            opacity: 0.7;
            transition: opacity 0.2s;
            padding: 5px;
        }
        .btn-delete-note:hover {
            opacity: 1;
        }
    </style>
</head>
<body>

    <div class="container-fluid">
        
        <header class="header-section d-flex justify-content-between align-items-center">
            <a href="therapist_dashboard.html" class="btn btn-sm text-decoration-none" style="color: var(--color-accent-teal);">
                <i class="fas fa-arrow-left me-2"></i> Dashboard
            </a>
            <h1 class="fs-4 fw-bold mb-0">Confidential Session Notes</h1>
            
            <div></div>
        </header>

        <div class="row">
            
            <div class="col-lg-5">
                <div class="data-card">
                    <h5 class="fw-bold mb-3">Add New Session Note</h5>
                    
                    <form id="noteForm">
                        <div class="mb-3">
                            <label for="clientSelect" class="form-label small text-muted">Select Client:</label>
                            <select class="form-select form-select-dark" id="clientSelect" required>
                                <option value="" disabled selected>--- Select Client ---</option>
                                <option value="Amit Singh">Amit Singh</option>
                                <option value="Priya Sharma">Priya Sharma</option>
                                <option value="Ravi Verma">Ravi Verma</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="noteDate" class="form-label small text-muted">Session Date:</label>
                            <input type="date" class="form-control form-control-dark" id="noteDate" required>
                        </div>

                        <div class="mb-3">
                            <label for="noteContent" class="form-label small text-muted">Clinical Note Content (SOAP/Process Note):</label>
                            <textarea class="form-control form-control-dark" id="noteContent" rows="12" placeholder="S: Subjective (Client's complaint)... O: Objective (Observations)... A: Assessment... P: Plan..." required></textarea>
                        </div>
                        
                        <button type="submit" class="btn btn-teal w-100">
                            <i class="fas fa-save me-1"></i> Save Note Securely
                        </button>
                    </form>
                </div>
            </div>

            <div class="col-lg-7">
                <div class="data-card">
                    <h5 class="fw-bold mb-3" id="historyTitle">Notes History: Select a Client</h5>
                    
                    <div id="notesHistoryContainer">
                        <p class="text-center text-muted mt-5">Please select a client from the dropdown on the left to view their session notes.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const STORAGE_KEY_NOTES = 'clientSessionNotes';
        const notesHistoryContainer = document.getElementById('notesHistoryContainer');
        const clientSelect = document.getElementById('clientSelect');
        const noteForm = document.getElementById('noteForm');
        const noteDateInput = document.getElementById('noteDate');
        const noteContentInput = document.getElementById('noteContent');
        const historyTitle = document.getElementById('historyTitle');

        // --- CORE DATA FUNCTIONS ---

        function getAllNotes() {
            // Returns an object where keys are client names and values are arrays of notes
            const data = localStorage.getItem(STORAGE_KEY_NOTES);
            return data ? JSON.parse(data) : {};
        }

        function saveAllNotes(notes) {
            localStorage.setItem(STORAGE_KEY_NOTES, JSON.stringify(notes));
        }

        function getClientNotes(clientName) {
            const allNotes = getAllNotes();
            return allNotes[clientName] || [];
        }

        function addNoteToClient(clientName, date, content) {
            const allNotes = getAllNotes();
            
            if (!allNotes[clientName]) {
                allNotes[clientName] = [];
            }
            
            const newNote = {
                date: date,
                content: content,
                id: Date.now() // Unique ID for deletion
            };
            
            allNotes[clientName].push(newNote);

            // Sort notes by date (newest first)
            allNotes[clientName].sort((a, b) => new Date(b.date) - new Date(a.date));

            saveAllNotes(allNotes);
        }

        // --- NEW: DELETE FUNCTION ---
        window.deleteNote = function(clientName, noteId) {
            if (!confirm(`Are you sure you want to permanently delete this session note? This action cannot be undone.`)) {
                return;
            }

            const allNotes = getAllNotes();
            
            if (allNotes[clientName]) {
                // Filter out the specific note by its ID
                // Note that note.id is a number (Date.now()), so use == or coercion
                allNotes[clientName] = allNotes[clientName].filter(note => note.id != noteId); 
                saveAllNotes(allNotes);
                
                // Reload the history panel for the current client
                renderNotesHistory(clientName);
            }
        }

        // --- UI RENDERER ---

        function renderNotesHistory(clientName) {
            const notes = getClientNotes(clientName);
            notesHistoryContainer.innerHTML = '';
            historyTitle.textContent = `Notes History: ${clientName}`;

            if (notes.length === 0) {
                notesHistoryContainer.innerHTML = `<p class="text-center text-muted mt-5">No session notes found for ${clientName}. Add one using the form on the left.</p>`;
                return;
            }

            notes.forEach(note => {
                const noteCard = document.createElement('div');
                noteCard.className = 'note-card';
                // Add note ID to the delete function call
                noteCard.innerHTML = `
                    <button class="btn-delete-note" title="Delete Note" onclick="deleteNote('${clientName}', ${note.id})">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                    <span class="note-date">Session on: ${new Date(note.date).toDateString()}</span>
                    <p>${note.content}</p>
                `;
                notesHistoryContainer.appendChild(noteCard);
            });
        }
        
        // --- EVENT LISTENERS ---

        // 1. Handle Client Selection Change (to load history)
        clientSelect.addEventListener('change', function() {
            const selectedClient = this.value;
            if (selectedClient) {
                renderNotesHistory(selectedClient);
            }
        });

        // 2. Handle Form Submission (to save new note)
        noteForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const clientName = clientSelect.value;
            const noteDate = noteDateInput.value;
            const noteContent = noteContentInput.value;
            
            if (!clientName || !noteDate || !noteContent) {
                alert("Please fill all fields.");
                return;
            }
            
            addNoteToClient(clientName, noteDate, noteContent);
            
            // After saving, reload the history for the current client
            renderNotesHistory(clientName);
            
            // Clear the note content input after saving
            noteContentInput.value = '';

            alert(`Note for ${clientName} on ${noteDate} saved successfully!`);
        });

        // Set today's date as default on load
        document.addEventListener('DOMContentLoaded', () => {
            const today = new Date().toISOString().split('T')[0];
            noteDateInput.value = today;
        });

    </script>
</body>
</html>