<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Therapist Schedule & Calendar</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    
    <style>
        /* --- THEME COLORS FOR CONSISTENCY --- */
        :root {
            --color-bg-main: #2c3e50;         /* Main Body Background */
            --color-bg-card: #34495e;         /* Calendar/Schedule Background */
            --color-accent-teal: #55a8a7;
            --color-accent-pink: #e83e6f;
            --color-text-light: #ecf0f1;
            --color-text-muted: #95a5a6;
        }

        /* General Theme Styling - Dark Mode */
        body {
            background-color: var(--color-bg-main); 
            color: var(--color-text-light);
            min-height: 100vh;
            font-family: sans-serif;
            padding: 20px;
        }

        /* Header and Title */
        .header-section {
            padding: 15px 0;
            margin-bottom: 25px;
            border-bottom: 1px solid #3e5267;
        }
        
        /* Main Calendar Card Styling */
        .calendar-card {
            background-color: var(--color-bg-card);
            border-radius: 10px;
            padding: 20px;
        }
        
        /* --- CALENDAR GRID STYLING (Re-added) --- */
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr); /* 7 columns for 7 days */
            gap: 5px;
            text-align: center;
        }
        
        .day-header {
            font-weight: 700;
            color: var(--color-accent-teal);
            padding-bottom: 10px;
        }

        .timeslot {
            background-color: #3e5267;
            border-radius: 4px;
            padding: 8px 5px;
            margin-bottom: 5px;
            font-size: 0.85rem;
            cursor: pointer;
        }
        .timeslot.booked {
            background-color: var(--color-accent-pink); /* Pink for booked slots */
            color: white;
            font-weight: 600;
        }
        /* --- END CALENDAR GRID STYLING --- */

        /* Appointment List / Side Panel */
        .appointment-list-item {
            background-color: #3e5267;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            border-left: 5px solid var(--color-accent-teal);
        }
        
        /* Form Controls */
        .form-control-dark, .form-select-dark {
            background-color: #3e5267;
            border: 1px solid #4a647d;
            color: var(--color-text-light);
        }
        .form-control-dark::placeholder {
            color: var(--color-text-muted);
        }
        
        /* Book Button (Primary Action) */
        .btn-book-session {
            background-color: var(--color-accent-teal);
            color: white;
            font-weight: 600;
        }
    </style>
</head>
<body>

    <div class="container-fluid">
        
        <header class="header-section d-flex justify-content-between align-items-center">
            <a href="/user/therapPage" class="btn btn-sm text-decoration-none" style="color: var(--color-accent-teal);">
                <i class="fas fa-arrow-left me-2"></i> Dashboard
            </a>
            <h1 class="fs-4 fw-bold mb-0">Weekly Schedule</h1>
            
            <div class="d-flex gap-2">
                <button class="btn btn-sm btn-set-availability" data-bs-toggle="modal" data-bs-target="#availabilityModal">
                    <i class="fas fa-clock me-1"></i> Set Availability
                </button>
                <button class="btn btn-sm btn-book-session" data-bs-toggle="modal" data-bs-target="#bookAppointmentModal">
                    <i class="fas fa-plus me-1"></i> Book New Session
                </button>
            </div>
        </header>

        <div class="row">
            
            <div class="col-lg-8 mb-4">
                <div class="calendar-card">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4 class="mb-0">Week View</h4>
                    </div>
                    
                    <div class="calendar-grid" id="weeklyCalendarGrid">
                        <div class="col-span-7 text-center text-muted" id="calendarPlaceholder">Loading calendar...</div>
                    </div>
                </div>
            </div>

            <div class="col-lg-4 mb-4">
                <h4 class="mb-3">Upcoming Appointments</h4>
                
                <div id="upcomingAppointmentsList">
                    <p class="text-center text-muted mt-5" id="noAppointmentsMessage">No upcoming sessions. Click 'Book New Session' to add one.</p>
                </div>
                
                <h5 class="mt-4 mb-3 text-danger"><i class="fas fa-bell me-2"></i> Reminders</h5>
                <p class="text-muted small">Send intake forms to new clients 24 hours before the session.</p>
            </div>
        </div>
    </div>
    
    <div class="modal fade" id="bookAppointmentModal" tabindex="-1" aria-labelledby="bookAppointmentModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="background-color: var(--color-bg-card);">
          <div class="modal-header border-bottom border-secondary">
            <h5 class="modal-title" id="bookAppointmentModalLabel" style="color:var(--color-text-light);">Book New Session</h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body" style="color:var(--color-text-light);">
            <form id="bookAppointmentForm">
              <div class="mb-3">
                <input type="text" class="form-control form-control-dark" id="clientName" placeholder="Client Name" required>
              </div>
              <div class="mb-3">
                <label for="sessionDate" class="form-label small text-muted">Date:</label>
                <input type="date" class="form-control form-control-dark" id="sessionDate" required>
              </div>
              <div class="mb-3">
                <label for="sessionTime" class="form-label small text-muted">Time:</label>
                <input type="time" class="form-control form-control-dark" id="sessionTime" required>
              </div>
              <div class="mb-3">
                <input type="text" class="form-control form-control-dark" id="sessionTopic" placeholder="Session Topic (e.g., Anxiety Mgmt)" required>
              </div>
              <button type="submit" class="btn btn-book-session w-100">Confirm Booking</button>
            </form>
          </div>
        </div>
      </div>
    </div>

    <div class="modal fade" id="availabilityModal" tabindex="-1" aria-labelledby="availabilityModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="background-color: var(--color-bg-card);">
          <div class="modal-header border-bottom border-secondary">
            <h5 class="modal-title" id="availabilityModalLabel" style="color:var(--color-text-light);">Set Weekly Availability</h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body" style="color:var(--color-text-light);">
            <p class="text-muted">This area allows you to define your recurrent working hours.</p>
          </div>
          <div class="modal-footer border-top border-secondary">
            <button type="button" class="btn btn-book-session">Save Schedule</button>
          </div>
        </div>
      </div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const STORAGE_KEY_APPOINTMENTS = 'therapistAppointments';
        const upcomingAppointmentsList = document.getElementById('upcomingAppointmentsList');
        const bookAppointmentForm = document.getElementById('bookAppointmentForm');
        const bookAppointmentModal = new bootstrap.Modal(document.getElementById('bookAppointmentModal'));
        const noAppointmentsMessage = document.getElementById('noAppointmentsMessage');
        const weeklyCalendarGrid = document.getElementById('weeklyCalendarGrid');

        // --- CORE FUNCTIONS ---

        function getAppointments() {
            const data = localStorage.getItem(STORAGE_KEY_APPOINTMENTS);
            let appointments = data ? JSON.parse(data) : [];
            
            // Sort by date and time
            appointments.sort((a, b) => {
                const dateTimeA = new Date(`${a.date}T${a.time}`);
                const dateTimeB = new Date(`${b.date}T${b.time}`);
                return dateTimeA - dateTimeB;
            });
            return appointments;
        }

        function saveAppointments(appointments) {
            // Sorting is done in getAppointments, so we just save
            localStorage.setItem(STORAGE_KEY_APPOINTMENTS, JSON.stringify(appointments));
        }
        
        // Helper to format date for display
        function formatDate(dateString) {
            const options = { weekday: 'short', month: 'short', day: 'numeric' };
            return new Date(dateString).toLocaleDateString('en-US', options);
        }
        
        // Helper to format time for display (24h to 12h)
        function formatTime(timeString) {
            const [hours, minutes] = timeString.split(':').map(Number);
            const ampm = hours >= 12 ? 'PM' : 'AM';
            const hour12 = hours % 12 || 12; 
            return `${hour12}:${String(minutes).padStart(2, '0')} ${ampm}`;
        }

        // --- CALENDAR GRID RENDERER (Placeholder Functionality) ---
        function renderCalendarGrid() {
            const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
            const appointments = getAppointments();
            const now = new Date();
            
            // Create headers
            let gridHTML = days.map(day => `<div class="day-header">${day}</div>`).join('');
            
            // Simple logic: render 3 rows of placeholder slots for the next week
            const slotsPerDay = 3;
            const todayIndex = (now.getDay() + 6) % 7; // Monday = 0, Sunday = 6
            const startDate = new Date(now);
            startDate.setDate(now.getDate() - todayIndex); // Start on Monday

            for (let r = 0; r < slotsPerDay; r++) {
                for (let d = 0; d < 7; d++) {
                    const slotDate = new Date(startDate);
                    slotDate.setDate(startDate.getDate() + d);
                    
                    const dateKey = slotDate.toISOString().split('T')[0];
                    const timeKey = `${9 + r}:00`; // Placeholder times: 9:00, 10:00, 11:00

                    const matchingApp = appointments.find(app => 
                        app.date === dateKey && app.time === `${9 + r}:00`);

                    if (matchingApp) {
                        gridHTML += `<div class="timeslot booked" title="${matchingApp.name}">${formatTime(matchingApp.time)} (${matchingApp.name.split(' ')[0]})</div>`;
                    } else {
                        gridHTML += `<div class="timeslot" title="${dateKey} - Available">${formatTime(timeKey)}</div>`;
                    }
                }
            }

            weeklyCalendarGrid.innerHTML = gridHTML;
            document.querySelector('.calendar-card h4').textContent = `Weekly View (${formatDate(startDate)} - ${formatDate(new Date(startDate.getTime() + 6 * 24 * 60 * 60 * 1000))})`;
        }


        // --- APPOINTMENTS LIST RENDERER ---
        function renderAppointments() {
            let appointments = getAppointments();
            
            // Filter out past appointments
            const now = new Date();
            appointments = appointments.filter(app => new Date(`${app.date}T${app.time}`) > now);
            
            upcomingAppointmentsList.innerHTML = '';

            if (appointments.length === 0) {
                upcomingAppointmentsList.appendChild(noAppointmentsMessage);
                noAppointmentsMessage.style.display = 'block';
                return;
            }
            
            noAppointmentsMessage.style.display = 'none';

            appointments.forEach(app => {
                const formattedTime = formatTime(app.time);
                const formattedDate = formatDate(app.date);

                const appItem = document.createElement('div');
                appItem.className = 'appointment-list-item';
                appItem.innerHTML = `
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h6>${app.name} - ${formattedTime}</h6>
                            <small>Date: ${formattedDate} | Topic: ${app.topic}</small>
                        </div>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteAppointment('${app.id}', event)">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
                upcomingAppointmentsList.appendChild(appItem);
            });
        }
        
        function addNewAppointment(name, date, time, topic) {
            const appointments = getAppointments();
            const newId = Date.now();
            
            const newAppointment = {
                id: newId,
                name: name,
                date: date,
                time: time,
                topic: topic
            };
            
            appointments.push(newAppointment);
            saveAppointments(appointments);
            renderAppointments(); // Update the list
            renderCalendarGrid(); // Update the calendar
        }

        window.deleteAppointment = function(id, event) {
            event.preventDefault();
            if (!confirm("Are you sure you want to cancel this appointment?")) {
                return;
            }
            let appointments = getAppointments();
            appointments = appointments.filter(app => app.id != id); 
            saveAppointments(appointments);
            renderAppointments();
            renderCalendarGrid(); // Update the calendar
        }

        // --- EVENT LISTENERS ---

        // Handle Form Submission
        bookAppointmentForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const name = document.getElementById('clientName').value;
            const date = document.getElementById('sessionDate').value;
            const time = document.getElementById('sessionTime').value;
            const topic = document.getElementById('sessionTopic').value;
            
            addNewAppointment(name, date, time, topic);
            bookAppointmentModal.hide();
            bookAppointmentForm.reset();
        });

        // Initial render on page load
        renderAppointments();
        renderCalendarGrid();
    </script>
</body>
</html>